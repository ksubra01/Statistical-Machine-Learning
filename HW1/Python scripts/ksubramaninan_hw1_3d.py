# -*- coding: utf-8 -*-
"""KSubramaninan-HW1-3d.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OYWxgPX9MrQAWNZvVtLn-4pGW66s5ABn
"""

#Problem 3 
#sub problem d
# Name: Karthick Subramanian
# ASUID: 1223408524

from matplotlib import pyplot as plt
import math
import numpy as np

n = 256
sigm_sq = 1
f_x = []
varaince = []
Bias = []

X = []

for i in range(1,n+1):
  X.append(i/n)

M = [1,2,4,8,16,32]
emp = []
y = []

def f_bar(j,m,f_x):
  f = 0
  for i in range((j-1)*m + 1, j*m+1):
    f = f + f_x[i-1]
  return f/m

#calculate y
for i in range(1,n+1):
    x = i/n
    y.append(4 * np.sin(math.pi*x) * np.cos(6*math.pi*pow(x,2)) + np.random.normal(0,1))

 
  #Calculate f(x)
for i in range(1,n+1):
    x = i/n
    f_x.append(4 * math.sin(math.pi*x) * math.cos(6*math.pi*pow(x,2)))

for m in range(len(M)):
  
  f_cap = []
  emp_error = 0 
  bias_1 = 0
  c = []

  #Calculate Emprical error
  for i in range(1,n+1):
    f_cap = 0
    for j in range(1,int(n/M[m])+1):
      if (X[i-1] > (j-1)*(M[m]/n)) and (X[i-1] <= j*(M[m]/n)):
        c_sum = 0
        for k in range((j-1)*M[m]+1,j*M[m] + 1):
          c_sum = c_sum + y[k-1]
    f_cap = (c_sum/M[m])        
    emp_error = emp_error + ((f_cap - f_x[i-1]) ** 2)
  emp.append(emp_error/n)
  

  # Calculate Bias
  for j in range(1, int(n/M[m])+1):
    for i in range((j-1)*M[m] + 1, j*M[m]+1):
      bias_1 = bias_1 + ((f_bar(j,M[m],f_x) - f_x[i-1]) ** 2)
  Bias.append(bias_1 / n)

  #print(emp)
  #Calculate Variance
  varaince.append(sigm_sq/M[m])

tot_error = []
for i in range(len(M)):
  tot_error.append(Bias[i] + varaince[i])

plt.plot(M,emp, label = "emp")
plt.plot(M,varaince, label="Var")
plt.plot(M,Bias, label="bias")
plt.plot(M,tot_error, label="Avg Error")
plt.xlabel("m values")
plt.ylabel("Error")
plt.title("Error vs m values")
plt.legend()
plt.show()

