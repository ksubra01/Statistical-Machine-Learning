# -*- coding: utf-8 -*-
"""KSubramanian-HW1-5b.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OmfEDOJQYnBEcTVPqMO19lMSF1E4NMW0
"""

#Problem 5 
#sub problem b
# Name: Karthick Subramanian
# ASUID: 1223408524

# import required libararies
import numpy as np
from keras.datasets import mnist
from matplotlib import pyplot as plt

d = 784
clas = 10

# Obtain the data set
(X_train, labels_train), (X_test, labels_test) = mnist.load_data()
#mndata = MNIST(r'/content/train-images-idx3-ubyte.gz')
#X_train, labels_train = map(np.array, mndata.load_training())
#X_test, labels_test = map(np.array, mndata.load_testing())
X_train = X_train/255.0
X_test = X_test/255.0

X_train = X_train.reshape(60000,784)
X_test = X_test.reshape(10000,784)

##  Training function ##
def train(X,y,lambd):
  X_Trans = np.transpose(X)
  I = np.identity(d)
  w = []
  Inv = np.linalg.solve(np.dot(X_Trans,X) + lambd*I, I)
  X_t_y = np.dot(X_Trans,y)
  w_cap = np.dot(Inv,X_t_y)
  return w_cap

## Function for one hot encoding ##
def one_hot_encode(y,cla):
  ohe = np.zeros((y.shape[0],cla))
  for i,ys in enumerate(y):
    ohe[i][ys] = 1
  return ohe

## Predict function ##
def predict(W,x_prime):
  w_Trans = np.transpose(W)
  a,b = np.shape(x_prime)
  result = []
  for i in range(a):
    x_i_prime = x_prime[i]
    x_i_prime = np.transpose(x_i_prime)
    result.append(np.argmax(np.dot(w_Trans,x_i_prime)))

  return result

## Error function ##
def Error(pred, X, labels):
  a,b = np.shape(X)
  Error = 0
  for i in range(a):
    if labels[i] != pred[i]:
      Error = Error + 1
  return Error / a

# change the labels to a distribution using one hot encoding
Y_train = one_hot_encode(labels_train, clas)

# Train the model to get W_cap
W_Cap = train(X_train,Y_train,0.0004)

# Find the error by comparing the predicted value and the labels
Err_Train = Error(predict(W_Cap,X_train),X_train, labels_train)
Err_Test = Error(predict(W_Cap,X_test), X_test, labels_test)

#print the Error %
print("Train Error(%) =",Err_Train*100)
print("Test Error(%) = ",Err_Test*100)

